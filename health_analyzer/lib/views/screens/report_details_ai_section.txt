// Replace the _buildAiInsightsSection method with this code:

  Widget _buildAiInsightsSection() {
    if (!_showAiInsights) {
      return const SizedBox.shrink();
    }

    // Load AI insights when section is expanded
    if (_aiInsights == null && !_loadingAiInsights && _aiError == null) {
      _loadAiInsights();
    }

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(AppTheme.spacing20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                const Icon(
                  Icons.lightbulb_outline,
                  color: AppTheme.infoColor,
                ),
                const SizedBox(width: AppTheme.spacing8),
                Expanded(
                  child: Text(
                    'AI Health Analysis',
                    style: AppTheme.titleLarge.copyWith(
                      color: AppTheme.infoColor,
                    ),
                  ),
                ),
                // Refresh button
                if (_aiInsights != null)
                  IconButton(
                    icon: const Icon(Icons.refresh, size: 20),
                    onPressed: () {
                      setState(() {
                        _aiInsights = null;
                      });
                      _loadAiInsights();
                    },
                    tooltip: 'Regenerate insights',
                  ),
              ],
            ),

            const SizedBox(height: AppTheme.spacing16),
            const Divider(),
            const SizedBox(height: AppTheme.spacing16),

            // Loading state
            if (_loadingAiInsights)
              Center(
                child: Column(
                  children: [
                    const CircularProgressIndicator(),
                    const SizedBox(height: AppTheme.spacing12),
                    Text(
                      'Analyzing your report...',
                      style: AppTheme.bodyMedium.copyWith(
                        color: AppTheme.textSecondary,
                      ),
                    ),
                  ],
                ),
              )
            
            // Error state
            else if (_aiError != null)
              Center(
                child: Column(
                  children: [
                    const Icon(
                      Icons.error_outline,
                      color: AppTheme.errorColor,
                      size: 48,
                    ),
                    const SizedBox(height: AppTheme.spacing12),
                    Text(
                      'Failed to generate AI insights',
                      style: AppTheme.titleMedium,
                    ),
                    const SizedBox(height: AppTheme.spacing8),
                    Text(
                      _aiError!.contains('API key')
                          ? 'Please check your Gemini API key in settings'
                          : 'Please try again later',
                      style: AppTheme.bodySmall.copyWith(
                        color: AppTheme.textSecondary,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: AppTheme.spacing16),
                    TextButton.icon(
                      onPressed: () {
                        setState(() {
                          _aiError = null;
                        });
                        _loadAiInsights();
                      },
                      icon: const Icon(Icons.refresh),
                      label: const Text('Retry'),
                    ),
                  ],
                ),
              )
            
            // AI insights content
            else if (_aiInsights != null)
              _buildAiInsightsContent()
            
            // Initial state
            else
              Center(
                child: TextButton.icon(
                  onPressed: _loadAiInsights,
                  icon: const Icon(Icons.auto_awesome),
                  label: const Text('Generate AI Analysis'),
                ),
              ),

            // Disclaimer (always show when insights are loaded)
            if (_aiInsights != null || _loadingAiInsights) ...[
              const SizedBox(height: AppTheme.spacing20),
              Container(
                padding: const EdgeInsets.all(AppTheme.spacing12),
                decoration: BoxDecoration(
                  color: AppTheme.warningLight,
                  borderRadius: BorderRadius.circular(AppTheme.radiusSmall),
                ),
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Icon(
                      Icons.info_outline,
                      size: 16,
                      color: AppTheme.warningColor,
                    ),
                    const SizedBox(width: AppTheme.spacing8),
                    Expanded(
                      child: Text(
                        'This is AI-generated information for educational purposes only. Always consult qualified healthcare professionals for medical advice.',
                        style: AppTheme.bodySmall.copyWith(
                          color: AppTheme.warningColor,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildAiInsightsContent() {
    final insights = _aiInsights!;
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Overall Assessment
        Text(
          'Overall Assessment',
          style: AppTheme.titleMedium,
        ),
        const SizedBox(height: AppTheme.spacing8),
        Text(
          insights['overall_assessment'] ?? 'No assessment available',
          style: AppTheme.bodyMedium.copyWith(
            color: AppTheme.textSecondary,
          ),
        ),

        // Areas of Concern
        if (insights['concerns'] != null && (insights['concerns'] as List).isNotEmpty) ...[
          const SizedBox(height: AppTheme.spacing20),
          Text(
            'Areas of Concern',
            style: AppTheme.titleMedium,
          ),
          const SizedBox(height: AppTheme.spacing12),
          ...(insights['concerns'] as List).map((concern) {
            return Padding(
              padding: const EdgeInsets.only(bottom: AppTheme.spacing16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Icon(
                        Icons.warning_amber,
                        size: 18,
                        color: AppTheme.warningColor,
                      ),
                      const SizedBox(width: AppTheme.spacing8),
                      Expanded(
                        child: Text(
                          concern['parameter'] ?? '',
                          style: AppTheme.titleSmall.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: AppTheme.spacing4),
                  Padding(
                    padding: const EdgeInsets.only(left: 26),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        if (concern['issue'] != null) ...[
                          Text(
                            concern['issue'],
                            style: AppTheme.bodySmall,
                          ),
                          const SizedBox(height: AppTheme.spacing4),
                        ],
                        if (concern['recommendation'] != null)
                          Text(
                            'ðŸ’¡ ${concern['recommendation']}',
                            style: AppTheme.bodySmall.copyWith(
                              color: AppTheme.infoColor,
                              fontStyle: FontStyle.italic,
                            ),
                          ),
                      ],
                    ),
                  ),
                ],
              ),
            );
          }).toList(),
        ],

        // Positive Notes
        if (insights['positive_notes'] != null && (insights['positive_notes'] as List).isNotEmpty) ...[
          const SizedBox(height: AppTheme.spacing20),
          Text(
            'Positive Observations',
            style: AppTheme.titleMedium,
          ),
          const SizedBox(height: AppTheme.spacing12),
          ...(insights['positive_notes'] as List).map((note) {
            return Padding(
              padding: const EdgeInsets.only(bottom: AppTheme.spacing8),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Icon(
                    Icons.check_circle,
                    size: 16,
                    color: AppTheme.successColor,
                  ),
                  const SizedBox(width: AppTheme.spacing8),
                  Expanded(
                    child: Text(
                      note,
                      style: AppTheme.bodyMedium,
                    ),
                  ),
                ],
              ),
            );
          }).toList(),
        ],

        // Next Steps
        if (insights['next_steps'] != null && (insights['next_steps'] as List).isNotEmpty) ...[
          const SizedBox(height: AppTheme.spacing20),
          Text(
            'Recommended Next Steps',
            style: AppTheme.titleMedium,
          ),
          const SizedBox(height: AppTheme.spacing12),
          ...(insights['next_steps'] as List).asMap().entries.map((entry) {
            return Padding(
              padding: const EdgeInsets.only(bottom: AppTheme.spacing8),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Container(
                    width: 20,
                    height: 20,
                    decoration: const BoxDecoration(
                      color: AppTheme.primaryColor,
                      shape: BoxShape.circle,
                    ),
                    child: Center(
                      child: Text(
                        '${entry.key + 1}',
                        style: AppTheme.labelSmall.copyWith(
                          color: Colors.white,
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: AppTheme.spacing8),
                  Expanded(
                    child: Text(
                      entry.value,
                      style: AppTheme.bodyMedium,
                    ),
                  ),
                ],
              ),
            );
          }).toList(),
        ],
      ],
    );
  }
